@model IEnumerable<OnlineStore2.ViewModels.MotorcycleIndexVM>

@{
    ViewBag.Title = "Index";
}

<style>
    * {
        box-sizing: border-box;
    }

    .column {
        /*float is the key to make the columns done. Without the flout attribute the output is in horizontal shape but with flout attribute it's in
            vertical shape.
        */
        float: left;
        width: 50%;
        padding: 10px;
        height: 300px;
    }

    .columnImage {
        float: left;
        width: 80%;
        padding: 10px;
    }

        .columnImage img {
            margin-left: 40px;
            margin-top: 20px;
            cursor: pointer; /* Add cursor style to indicate interactivity */
        }

    .row:after {
        content: "";
        display: table;
        clear: both;
    }

    .modelRow {
        display: none;
    }
</style>

<script>
    function myFnc(model) {
        // In this case using document.getElementById('modelRow') instead of document.getElementsByClassName('modelRow') will not work as intended in this scenario.
        // The document.getElementById() method retrieves a single element with the specified ID attribute, not a collection of elements.It is suitable when you want to target a specific element with a unique ID.
        // In the provided code, modelRow is intended to be a CSS class applied to multiple elements, specifically the rows in the table that correspond to different models.Therefore, you need to use document.
        // getElementsByClassName('modelRow') to retrieve all elements with the class name 'modelRow' as a collection.
        var elements = document.getElementsByClassName('modelRow');
        for (var i = 0; i < elements.length; i++) {
            if (elements[i].getAttribute('data-model') === model) {
                elements[i].style.display = 'table-row';
            } else {
                elements[i].style.display = 'none';
            }
        }
    }
</script>

<!-- Information about the difference between 'Html.ActionLink' and 'Html.Partial'
    'Html.ActionLink' and 'Html.Partial' are two different HTML helper methods in ASP.NET MVC with distinct purposes:
Html.ActionLink:
Purpose: Generates an HTML anchor element (<a>) that represents a link to an action method in a controller.
Usage: Typically used to create clickable links that navigate to different pages or invoke specific actions in your MVC application.
Example usage:
csharp
Copy code
Html.ActionLink("Home", "Index", "Home")
This generates a link with the anchor text "Home" that points to the "Index" action in the "Home" controller.
Html.Partial:
Purpose: Renders a partial view as part of the current view.
Usage: Used to include the content of a CSHTML file (partial view) within another CSHTML file (main view or another partial view).
Example usage:
csharp
Copy code
Html.Partial("~/Views/Shared/AnotherFile.cshtml")
This renders the content of the "AnotherFile.cshtml" partial view and includes it in the current view.
In summary, 'Html.ActionLink' is used to generate links, allowing users to navigate between different actions or pages within the application. 
    On the other hand, 'Html.Partial' is used to render the content of a CSHTML file within another CSHTML file, effectively including reusable components or partial views within the main view.
It's important to understand the distinction between these two methods to use them appropriately in your MVC views, depending on whether you need to create links or include partial views.
    -->
<div>
    @Html.ActionLink("Create", "Create", "Motorcycles")
    @Html.ActionLink("Edit", "Edit", "Motorcycles")
    @Html.ActionLink("Delete", "Delete", "Motorcycles")
    @Html.ActionLink("Details", "Details", "Motorcycles")
</div>

<div class="row">
    <div class="column" style="background-color:#aaa;">
        @foreach (var item in Model)
        {
            <div class="col-sm-3">
                <div class="columnImage">
                    <table>
                        <tr>
                            <td>
                                <img src="data:image;base64,@System.Convert.ToBase64String(item.Image)" style="width:80%" onclick="myFnc('@item.Model')" />
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
        }
    </div>
    <div class="column" style="background-color:#bbb;">
        <table class="table">
            <tr>
                <th>
                    <h4>Model</h4>
                </th>
                <th>
                    <h4>Price</h4>
                </th>
                <th>
                    <h4>Brand</h4>
                </th>
                <th>
                    <h4>Category</h4>
                </th>
            </tr>
            @foreach (var item in Model)
            {
                <tr class="modelRow" data-model="@item.Model">
                    <td>
                        @Html.DisplayFor(modelItem => item.Model)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.BrandName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Category)
                    </td>
                </tr>
            }
        </table>
    </div>
</div>
